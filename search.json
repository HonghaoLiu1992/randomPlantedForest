[{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"http://plantedml.com/randomPlantedForest/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the Data","title":"Bikesharing: Decomposition Example","text":"First load Bikeshare data ISLR2 package, provides dataset published UCI Machine Learning Repository. data set contains hourly daily count rental bikes years 2011 2012 Capital bikeshare system, along weather seasonal information. outcome going bikers, total number bikers system. predictors interest case going following: hr: Hour day, 0 23 hours. temp: Normalized temperature Celsius workingday: Binary value indicating whether ’s work day (1) (0) recode hr column 24-level factor numeric column.","code":"data(Bikeshare) bike <- data.table(Bikeshare) bike[, hr := as.numeric(as.character(hr))] bike[, workingday := factor(workingday, levels = c(0, 1), labels = c(\"No Workingday\", \"Workingday\"))] bike[, season := factor(season, levels = 1:4, labels = c(\"Winter\", \"Spring\", \"Summer\", \"Fall\"))]  # Only one observation with this condition, removing it to make space. bike <- bike[weathersit != \"heavy rain/snow\", ]   head(bike) #>    season mnth day hr holiday weekday    workingday   weathersit temp  atemp #> 1: Winter  Jan   1  0       0       6 No Workingday        clear 0.24 0.2879 #> 2: Winter  Jan   1  1       0       6 No Workingday        clear 0.22 0.2727 #> 3: Winter  Jan   1  2       0       6 No Workingday        clear 0.22 0.2727 #> 4: Winter  Jan   1  3       0       6 No Workingday        clear 0.24 0.2879 #> 5: Winter  Jan   1  4       0       6 No Workingday        clear 0.24 0.2879 #> 6: Winter  Jan   1  5       0       6 No Workingday cloudy/misty 0.24 0.2576 #>     hum windspeed casual registered bikers #> 1: 0.81    0.0000      3         13     16 #> 2: 0.80    0.0000      8         32     40 #> 3: 0.80    0.0000      5         27     32 #> 4: 0.75    0.0000      3         10     13 #> 5: 0.75    0.0000      0          1      1 #> 6: 0.75    0.0896      0          1      1"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"fitting-purification-component-extraction","dir":"Articles","previous_headings":"","what":"Fitting, Purification, Component Extraction","title":"Bikesharing: Decomposition Example","text":"Next can fit Random Planted Forest bikers variable, using subset available predictors. limit model’s complexity setting max_interaction = 3, going visualize interactions third degree, using higher value might marginally improve predictive performance cost longer runtime. example , smaller model merely 20 trees suffices. also purify forest enable desired decomposition. step required global predictions may take time, implemented separate step. select predictors interest use extract_components() retrieve predictive components include , main effects 3rd degree interactions. resulting object also contains original data x, need later visualization. Please note fitting model, purification, extraction components may take time, depending available resources size data. example, steps took around 50 seconds complete GitHub Actions.","code":"rp <- rpf(   bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit + season,   data = bike,   max_interaction = 3, ntrees = 50 )  purify(rp) #> -- Regression Random Planted Forest -- #>  #> Formula: bikers ~ day + hr + temp + windspeed + workingday + hum + weathersit +      season  #> Fit using 8 predictors and 3-degree interactions. #> Forest is purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 50 #>  max_interaction: 3 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         parallel: FALSE #>           purify: FALSE #>               cv: FALSE vars <- c(\"hr\", \"temp\", \"workingday\", \"hum\", \"weathersit\", \"season\")  components <- extract_components(rp, bike, predictors = vars)  # There's a lot of components... str(components$m) #> Classes 'data.table' and 'data.frame':   8644 obs. of  42 variables: #>  $ intercept                   : num  144 144 144 144 144 ... #>  $ hr                          : num  -121 -121 -122 -123 -122 ... #>  $ temp                        : num  -34.9 -34.9 -34.9 -34.9 -34.9 ... #>  $ workingday                  : num  -1.06 -1.06 -1.06 -1.06 -1.06 ... #>  $ hum                         : num  -9.97 -8.42 -8.42 -3.85 -3.85 ... #>  $ weathersit                  : num  4.29 4.29 4.29 4.29 4.29 ... #>  $ season                      : num  -22.1 -22.1 -22.1 -22.1 -22.1 ... #>  $ hr:temp                     : num  29.1 29.1 29.4 29.3 29.3 ... #>  $ hr:workingday               : num  9.82 9.82 9.82 9.82 9.11 ... #>  $ hr:hum                      : num  6.33 5.23 5.23 2.02 2.02 ... #>  $ hr:weathersit               : num  -2.99 -2.99 -2.99 -2.99 -2.99 ... #>  $ hr:season                   : num  17.7 17.7 17.7 17.7 17.7 ... #>  $ temp:workingday             : num  -8.92 -8.92 -8.92 -8.92 -8.92 ... #>  $ hum:temp                    : num  3.7 3.56 3.56 2.39 2.39 ... #>  $ temp:weathersit             : num  -0.18 -0.18 -0.18 -0.18 -0.18 ... #>  $ season:temp                 : num  -1.39 -1.39 -1.39 -1.39 -1.39 ... #>  $ hum:workingday              : num  -4.15 -3.95 -3.95 -3.4 -3.4 ... #>  $ weathersit:workingday       : num  0.0136 0.0136 0.0136 0.0136 0.0136 ... #>  $ season:workingday           : num  -0.668 -0.668 -0.668 -0.668 -0.668 ... #>  $ hum:weathersit              : num  -0.0604 -0.1386 -0.1386 -0.3057 -0.3057 ... #>  $ hum:season                  : num  1.497 0.795 0.795 0.322 0.322 ... #>  $ season:weathersit           : num  -0.545 -0.545 -0.545 -0.545 -0.545 ... #>  $ hr:temp:workingday          : num  3.84 3.84 3.84 3.84 3.84 ... #>  $ hr:hum:temp                 : num  -1.39 -1.7 -1.7 -1.12 -1.12 ... #>  $ hr:temp:weathersit          : num  0.0743 0.0743 0.0743 0.0743 0.0743 ... #>  $ hr:season:temp              : num  0.697 0.697 0.697 0.697 0.697 ... #>  $ hr:hum:workingday           : num  1.56 1.35 1.35 1.53 1.53 ... #>  $ hr:weathersit:workingday    : num  0.0182 0.0182 0.0182 0.0182 0.0182 ... #>  $ hr:season:workingday        : num  0.581 0.581 0.581 0.581 0.581 ... #>  $ hr:hum:weathersit           : num  0.0631 0.1413 0.1413 0.3312 0.3312 ... #>  $ hr:hum:season               : num  -1.0655 -0.3636 -0.3636 -0.0723 -0.0723 ... #>  $ hr:season:weathersit        : num  0.455 0.455 0.455 0.455 0.455 ... #>  $ hum:temp:workingday         : num  1.278 1.278 1.278 0.993 0.993 ... #>  $ temp:weathersit:workingday  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ season:temp:workingday      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ hum:temp:weathersit         : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ hum:season:temp             : num  0.246 0.246 0.246 -0.126 -0.126 ... #>  $ season:temp:weathersit      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ hum:weathersit:workingday   : num  -0.00827 -0.00827 -0.00827 0.04039 0.04039 ... #>  $ hum:season:workingday       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ season:weathersit:workingday: num  0 0 0 0 0 0 0 0 0 0 ... #>  $ hum:season:weathersit       : num  0 0 0 0 0 0 0 0 0 0 ... #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"main-effects","dir":"Articles","previous_headings":"","what":"Main Effects","title":"Bikesharing: Decomposition Example","text":"","code":"p_main <- plot_main_effect(components, \"temp\") +   plot_main_effect(components, \"hr\") +   plot_main_effect(components, \"workingday\")  p_main + plot_layout(widths = c(.3, .3, .4))"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"way-interactions","dir":"Articles","previous_headings":"","what":"2-Way Interactions","title":"Bikesharing: Decomposition Example","text":"","code":"p_2way1 <- plot_twoway_effects(components, c(\"workingday\", \"temp\")) p_2way2 <- plot_twoway_effects(components, c(\"hr\", \"workingday\")) p_2way3 <- plot_twoway_effects(components, c(\"hr\", \"temp\")) #> Loading required namespace: scico  p_2way <- (p_2way1 / p_2way2 +      plot_layout(guides = \"collect\") &       theme(legend.position = \"bottom\")) | p_2way3  p_2way <- p_2way +    plot_annotation(tag_levels = list(c(\"1,2\", \"3,1\", \"3,3\")), tag_prefix = \"m(\", tag_suffix = \")\")  p_2way"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"way-interaction","dir":"Articles","previous_headings":"","what":"3-Way Interaction","title":"Bikesharing: Decomposition Example","text":"","code":"p_3way <- plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\"))  p_3way"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"everything-together","dir":"Articles","previous_headings":"","what":"Everything Together","title":"Bikesharing: Decomposition Example","text":"","code":"p_main / p_2way / p_3way +    plot_layout(heights = c(.2, .5, .3))"},{"path":"http://plantedml.com/randomPlantedForest/articles/Bikesharing-Decomposition-Example.html","id":"additional-effects","dir":"Articles","previous_headings":"","what":"Additional effects","title":"Bikesharing: Decomposition Example","text":"main effects: Iterating vars (hr, temp, workingday, hum, weathersit, season), passing plot_main_effect, collecting plots patchwork::wrap_plots():  use autoplot convenience. Internally just passes arguments specialized plot_* functions, depending number predictors supplied.      3rd degree interactions can tricky, effect .","code":"wrap_plots(lapply(vars, plot_main_effect, components = components)) autoplot(components, c(\"season\", \"workingday\")) autoplot(components, c(\"season\", \"hr\")) autoplot(components, c(\"season\", \"weathersit\")) autoplot(components, c(\"weathersit\", \"temp\")) autoplot(components, c(\"hum\", \"temp\")) autoplot(components, c(\"season\", \"hr\", \"weathersit\")) autoplot(components, c(\"workingday\", \"hr\", \"season\")) # Hard to interpret, likely spurious autoplot(components, c(\"workingday\", \"hr\", \"weathersit\")) # zero effect autoplot(components, c(\"weathersit\", \"season\", \"workingday\"))"},{"path":"http://plantedml.com/randomPlantedForest/articles/test/Regression-Test-oldrpf.html","id":"regression","dir":"Articles > Test","previous_headings":"","what":"Regression","title":"Regression Test: oldrpf","text":"supports loss = \"L2\" parameters epsilon delta applicable.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Theo Meyer. Author. Munir Hiabu. Author. Maike Spankus. Author. Marvin N. Wright. Author. Lukas Burk. Maintainer, author.","code":""},{"path":"http://plantedml.com/randomPlantedForest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hiabu et. al. (2020). Random Planted Forest: directly interpretable tree ensemble","code":"@Article{,   title = {Random Planted Forest: a directly interpretable tree ensemble},   author = {{Hiabu} and {Munir} and {Mammen} and {Enno} and {Meyer} and Joseph T.},   journal = {arXiv},   year = {2020},   doi = {10.48550/ARXIV.2012.14563},   url = {https://arxiv.org/abs/2012.14563}, }"},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"randomplantedforest","dir":"","previous_headings":"","what":"Random Planted Forest: A Directly Interpretable Tree Ensemble","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"randomPlantedForest implements “Random Planted Forest”, directly interpretable tree ensemble (arxiv).","code":""},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"can install development version randomPlantedForest GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"PlantedML/randomPlantedForest\")"},{"path":"http://plantedml.com/randomPlantedForest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Random Planted Forest: A Directly Interpretable Tree Ensemble","text":"Model fitting uses familiar interface: Prediction components can accessed via extract_components, including intercept, main effects, interactions specified degree. returned object also contains original data x, required visualization. Various visualization options available, e.g. main second-order interaction effects:  See Bikesharing: Decomposition Example article examples.","code":"library(randomPlantedForest) library(ggplot2) library(patchwork)  mtcars$cyl <- factor(mtcars$cyl) rpfit <- rpf(mpg ~ cyl + wt + hp, data = mtcars, ntrees = 25, max_interaction = 2) rpfit #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ cyl + wt + hp  #> Fit using 3 predictors and 2-degree interactions. #> Forest is _not_ purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 25 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         parallel: FALSE #>           purify: FALSE #>               cv: FALSE  predict(rpfit, new_data = mtcars) |>   cbind(mpg = mtcars$mpg) |>   head() #>      .pred  mpg #> 1 21.08519 21.0 #> 2 21.07633 21.0 #> 3 25.39977 22.8 #> 4 20.78283 21.4 #> 5 17.56310 18.7 #> 6 18.71368 18.1 components <- extract_components(rpfit, new_data = mtcars)   str(components) #> List of 2 #>  $ m:Classes 'data.table' and 'data.frame':  32 obs. of  7 variables: #>   ..$ intercept: num [1:32] 20.2 20.2 20.2 20.2 20.2 ... #>   ..$ cyl      : num [1:32] 0.477 0.477 1.343 0.477 -1.477 ... #>   ..$ wt       : num [1:32] 0.0623 0.0845 3.0677 -0.3823 -1.0544 ... #>   ..$ hp       : num [1:32] 0.373 0.373 0.629 0.373 -0.584 ... #>   ..$ cyl:wt   : num [1:32] -0.15403 -0.16567 -0.00392 -0.06926 0.14771 ... #>   ..$ cyl:hp   : num [1:32] 0.0429 0.0429 0.2779 0.0429 0.4573 ... #>   ..$ hp:wt    : num [1:32] 0.1049 0.0855 -0.0931 0.1623 -0.1054 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ x:Classes 'data.table' and 'data.frame':  32 obs. of  3 variables: #>   ..$ cyl: Factor w/ 3 levels \"4\",\"6\",\"8\": 2 2 1 2 3 2 3 1 1 2 ... #>   ..$ wt : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ hp : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"class\")= chr [1:2] \"rpf_components\" \"list\" p1 <- autoplot(components, \"wt\") p2 <- autoplot(components, \"hp\") p3 <- autoplot(components, \"cyl\") p4 <- autoplot(components, c(\"wt\", \"hp\"))  (p1 + p2) / (p3 + p4) +   plot_annotation(     title = \"Selected effects for mtcars\",     caption = \"(It's a tiny dataset but it has to fit in a README, okay?)\"   )"},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract predicted components from a Random Planted Forest — extract_components","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"Prediction components functional decomposition model prediction. sum components equals overall predicted value observation.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"","code":"extract_components(object, new_data, max_interaction = NULL, predictors = NULL)"},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"object fit object class rpf. new_data Data new observations predict. max_interaction integer NULL: Maximum degree interactions consider. Default use max_interaction parameter rpf object. Must 1 (main effects ) max_interaction rpf object. predictors character NULL: Vector one column names predictor variables new_data extract components . NULL, variables interactions returned.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"data.table number rows new_data one column main interaction term requested, including intercept. multiclass classification, number output columns multiplied number levels outcome.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"Extracts possible components max_interaction degrees, value set calling rpf(). intercept always included. Optionally predictors can specified include components including given variables. max_interaction greater length(predictors), max_interaction lowered accordingly.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"Depending number predictors max_interaction, number components increase drastically sum(choose(ncol(new_data), seq_len(max_interaction))).","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/extract_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract predicted components from a Random Planted Forest — extract_components","text":"","code":"# Regression task, only some predictors train <-  mtcars[1:20, 1:4] test <-  mtcars[21:32, 1:4]  set.seed(23) rpfit <- rpf(mpg ~ ., data = train, max_interaction = 3, ntrees = 30)  # Extract all components, including main effects and interaction terms up to `max_interaction` (components <- extract_components(rpfit, test)) #> $m #>     intercept        cyl       disp         hp  cyl:disp      cyl:hp #>  1:  20.00087  1.3768855  2.6463328  1.7329858 0.1226847  0.10609368 #>  2:  20.00087 -0.7992901 -0.8268513 -0.0064323 0.1684562 -0.09246586 #>  3:  20.00087 -0.7992901 -0.8268513 -0.0064323 0.1684562 -0.09246586 #>  4:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #>  5:  20.00087 -0.7992901 -1.3844161  0.1184759 0.1753777 -0.09246575 #>  6:  20.00087  1.3768855  4.2550639  4.5810324 0.4621982 -0.27912407 #>  7:  20.00087  1.3768855  2.6463328  4.5810324 0.1226847 -0.27912407 #>  8:  20.00087  1.3768855  4.2550639  0.5340290 0.4621982  0.05269070 #>  9:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #> 10:  20.00087 -0.4055283  1.0484424  0.1184759 0.0909271 -0.03448583 #> 11:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #> 12:  20.00087  1.3768855  2.6463328  0.1584594 0.1226847  0.12780335 #>         disp:hp  cyl:disp:hp #>  1: -0.31696214 -0.068887656 #>  2:  0.08826036 -0.033709443 #>  3:  0.08826036 -0.033709443 #>  4: -0.27259694  0.004351475 #>  5:  0.12779098 -0.031006151 #>  6: -0.17193448  0.016794219 #>  7: -0.46815054  0.097934960 #>  8: -0.22361410 -0.032020510 #>  9: -0.27259694  0.004351475 #> 10: -0.28526023  0.024649550 #> 11: -0.27259694  0.004351475 #> 12: -0.08930346 -0.079140085 #>  #> $x #>     cyl  disp  hp #>  1:   4 120.1  97 #>  2:   8 318.0 150 #>  3:   8 304.0 150 #>  4:   8 350.0 245 #>  5:   8 400.0 175 #>  6:   4  79.0  66 #>  7:   4 120.3  91 #>  8:   4  95.1 113 #>  9:   8 351.0 264 #> 10:   6 145.0 175 #> 11:   8 301.0 335 #> 12:   4 121.0 109 #>  #> attr(,\"class\") #> [1] \"rpf_components\" \"list\"            # sums to prediction cbind(rowSums(components$m), predict(rpfit, test)) #>    rowSums(components$m)    .pred #> 1               25.60000 25.60000 #> 2               18.49883 18.49883 #> 3               18.49883 18.49883 #> 4               15.25450 15.25450 #> 5               18.11533 18.11533 #> 6               30.24178 30.24178 #> 7               28.07846 28.07846 #> 8               26.42610 26.42610 #> 9               15.25450 15.25450 #> 10              20.55809 20.55809 #> 11              15.25450 15.25450 #> 12              24.26459 24.26459  # Only get components with interactions of a lower degree, ignoring 3-way interactions extract_components(rpfit, test, max_interaction = 2) #> $m #>     intercept        cyl       disp         hp  cyl:disp      cyl:hp #>  1:  20.00087  1.3768855  2.6463328  1.7329858 0.1226847  0.10609368 #>  2:  20.00087 -0.7992901 -0.8268513 -0.0064323 0.1684562 -0.09246586 #>  3:  20.00087 -0.7992901 -0.8268513 -0.0064323 0.1684562 -0.09246586 #>  4:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #>  5:  20.00087 -0.7992901 -1.3844161  0.1184759 0.1753777 -0.09246575 #>  6:  20.00087  1.3768855  4.2550639  4.5810324 0.4621982 -0.27912407 #>  7:  20.00087  1.3768855  2.6463328  4.5810324 0.1226847 -0.27912407 #>  8:  20.00087  1.3768855  4.2550639  0.5340290 0.4621982  0.05269070 #>  9:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #> 10:  20.00087 -0.4055283  1.0484424  0.1184759 0.0909271 -0.03448583 #> 11:  20.00087 -0.7992901 -0.8268513 -2.9467399 0.1684562 -0.07370080 #> 12:  20.00087  1.3768855  2.6463328  0.1584594 0.1226847  0.12780335 #>         disp:hp #>  1: -0.31696214 #>  2:  0.08826036 #>  3:  0.08826036 #>  4: -0.27259694 #>  5:  0.12779098 #>  6: -0.17193448 #>  7: -0.46815054 #>  8: -0.22361410 #>  9: -0.27259694 #> 10: -0.28526023 #> 11: -0.27259694 #> 12: -0.08930346 #>  #> $x #>     cyl  disp  hp #>  1:   4 120.1  97 #>  2:   8 318.0 150 #>  3:   8 304.0 150 #>  4:   8 350.0 245 #>  5:   8 400.0 175 #>  6:   4  79.0  66 #>  7:   4 120.3  91 #>  8:   4  95.1 113 #>  9:   8 351.0 264 #> 10:   6 145.0 175 #> 11:   8 301.0 335 #> 12:   4 121.0 109 #>  #> attr(,\"class\") #> [1] \"rpf_components\" \"list\"            # Only retrieve main effects (main_effects <- extract_components(rpfit, test, max_interaction = 1)) #> $m #>     intercept        cyl       disp         hp #>  1:  20.00087  1.3768855  2.6463328  1.7329858 #>  2:  20.00087 -0.7992901 -0.8268513 -0.0064323 #>  3:  20.00087 -0.7992901 -0.8268513 -0.0064323 #>  4:  20.00087 -0.7992901 -0.8268513 -2.9467399 #>  5:  20.00087 -0.7992901 -1.3844161  0.1184759 #>  6:  20.00087  1.3768855  4.2550639  4.5810324 #>  7:  20.00087  1.3768855  2.6463328  4.5810324 #>  8:  20.00087  1.3768855  4.2550639  0.5340290 #>  9:  20.00087 -0.7992901 -0.8268513 -2.9467399 #> 10:  20.00087 -0.4055283  1.0484424  0.1184759 #> 11:  20.00087 -0.7992901 -0.8268513 -2.9467399 #> 12:  20.00087  1.3768855  2.6463328  0.1584594 #>  #> $x #>     cyl  disp  hp #>  1:   4 120.1  97 #>  2:   8 318.0 150 #>  3:   8 304.0 150 #>  4:   8 350.0 245 #>  5:   8 400.0 175 #>  6:   4  79.0  66 #>  7:   4 120.3  91 #>  8:   4  95.1 113 #>  9:   8 351.0 264 #> 10:   6 145.0 175 #> 11:   8 301.0 335 #> 12:   4 121.0 109 #>  #> attr(,\"class\") #> [1] \"rpf_components\" \"list\"            # The difference is the combined contribution of interaction effects cbind(rowSums(main_effects$m), predict(rpfit, test)) #>    rowSums(main_effects$m)    .pred #> 1                 25.75707 25.60000 #> 2                 18.36829 18.49883 #> 3                 18.36829 18.49883 #> 4                 15.42799 15.25450 #> 5                 17.93564 18.11533 #> 6                 30.21385 30.24178 #> 7                 28.60512 28.07846 #> 8                 26.16685 26.42610 #> 9                 15.42799 15.25450 #> 10                20.76226 20.55809 #> 11                15.42799 15.25450 #> 12                24.18255 24.26459"},{"path":"http://plantedml.com/randomPlantedForest/reference/plot_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prediction Components — plot_main_effect","title":"Plot Prediction Components — plot_main_effect","text":"Plot Prediction Components","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/plot_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prediction Components — plot_main_effect","text":"","code":"plot_main_effect(components, predictor, ...)  plot_twoway_effects(components, predictors, ...)  plot_threeway_effects(components, predictors, ...)  # S3 method for rpf_components autoplot(object, predictors, ...)"},{"path":"http://plantedml.com/randomPlantedForest/reference/plot_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prediction Components — plot_main_effect","text":"components, object Predicted components rpf() including original data model fit , returned extract_components() predictor, predictors [character] vector predictor names, e.g. \"x1\" plot main effect x1, c(\"x1\", \"x2\") plot interaction term x1:x2. ... Unused","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/plot_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prediction Components — plot_main_effect","text":"ggplot2 object.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/plot_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prediction Components — plot_main_effect","text":"","code":"# introduce factor variables to show categorical feature handling mtcars$cyl <- factor(mtcars$cyl) mtcars$vs <- factor(mtcars$vs)  # Fit forest, extract components set.seed(12) rpfit <- rpf(mpg ~ cyl + wt + hp + drat + vs, data = mtcars, ntrees = 25, max_interaction = 3) components <- extract_components(rpfit, mtcars)  # Main effects ---- plot_main_effect(components, \"wt\")  plot_main_effect(components, \"drat\")  plot_main_effect(components, \"cyl\")   # 2-degree interaction effects ---- # 2d continuous, scatterplot of arbitrary orientation plot_twoway_effects(components, c(\"wt\", \"drat\")) #> Loading required namespace: scico  plot_twoway_effects(components, c(\"drat\", \"wt\"))   # continuous + categorical (forces continuous on x axis, colors by categorical) plot_twoway_effects(components, c(\"wt\", \"cyl\"))  # identical: plot_twoway_effects(components, c(\"cyl\", \"wt\"))  # 2d categorical, heatmap of arbitrary orientation plot_twoway_effects(components, c(\"vs\", \"cyl\"))  plot_twoway_effects(components, c(\"cyl\", \"vs\"))  # plot_threeway_effects(components, c(\"hr\", \"temp\", \"workingday\"))"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Planted Forest Predictions — predict.rpf","title":"Random Planted Forest Predictions — predict.rpf","text":"Random Planted Forest Predictions","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Planted Forest Predictions — predict.rpf","text":"","code":"# S3 method for rpf predict(   object,   new_data,   type = ifelse(object$mode == \"regression\", \"numeric\", \"prob\"),   ... )"},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Planted Forest Predictions — predict.rpf","text":"object fit object class rpf. new_data Data new observations predict. type \"numeric\" regression outcomes, \"class\" class predictions \"prob\" probability predictions. classification loss = \"L1\" \"L2\", \"numeric\" yields raw predictions guaranteed valid probabilities [0, 1]. type = \"prob\", truncated ensure property. loss \"logit\" \"exponential\", type = \"link\" alias type = \"numeric\", case raw predictions additional interpretation similar linear predictor glm. ... Unused.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Planted Forest Predictions — predict.rpf","text":"regression: tbl column .pred number rows new_data. classification: tbl one column level y containing class probabilities type = \"prob\". type = \"class\", one column .pred class predictions returned. type = \"numeric\" \"link\", one column .pred raw predictions.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/predict.rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Planted Forest Predictions — predict.rpf","text":"","code":"# Regression with L2 loss rpfit <- rpf(y = mtcars$mpg, x = mtcars[, c(\"cyl\", \"wt\")]) predict(rpfit, mtcars[, c(\"cyl\", \"wt\")]) #> # A tibble: 32 × 1 #>    .pred #>    <dbl> #>  1  19.7 #>  2  20.3 #>  3  24.6 #>  4  21.0 #>  5  16.8 #>  6  18.5 #>  7  15.2 #>  8  23.8 #>  9  23.5 #> 10  19.1 #> # … with 22 more rows"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an rpf fit — print.rpf","title":"Print an rpf fit — print.rpf","text":"Print rpf fit","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an rpf fit — print.rpf","text":"","code":"# S3 method for rpf print(x, ...)"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an rpf fit — print.rpf","text":"x object class rpf. ... arguments passed methods.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an rpf fit — print.rpf","text":"Invisibly: x.","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an rpf fit — print.rpf","text":"","code":"rpf(mpg ~ cyl + wt + drat, data = mtcars, max_interaction = 2, ntrees = 10) #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ cyl + wt + drat  #> Fit using 3 predictors and 2-degree interactions. #> Forest is _not_ purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 10 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         parallel: FALSE #>           purify: FALSE #>               cv: FALSE"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Compact printing of forest structures — print.rpf_forest","title":"Compact printing of forest structures — print.rpf_forest","text":"methods provided avoid flooding console long nested lists containing tree structures. Note","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compact printing of forest structures — print.rpf_forest","text":"","code":"# S3 method for rpf_forest print(x, ...)  # S3 method for rpf_forest str(object, ...)"},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compact printing of forest structures — print.rpf_forest","text":"x Object class rpf_forest ... arguments passed methods. object Object class rpf_forest","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/print.rpf_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compact printing of forest structures — print.rpf_forest","text":"","code":"rpfit <- rpf(mpg ~ cyl + wt, data = mtcars, ntrees = 10) print(rpfit$forest) #> <rpf_forest> of 10 trees str(rpfit$forest) #> <rpf_forest> of 10 trees"},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":null,"dir":"Reference","previous_headings":"","what":"Purify a Random Planted Forest — purify","title":"Purify a Random Planted Forest — purify","text":"TODO: Explain ","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purify a Random Planted Forest — purify","text":"","code":"purify(x, ...)  # S3 method for default purify(x, ...)  # S3 method for rpf purify(x, ...)  is_purified(x)"},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purify a Random Planted Forest — purify","text":"x object class rpf. ... (Unused)","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purify a Random Planted Forest — purify","text":"Invisibly: rpf object.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purify a Random Planted Forest — purify","text":"Unless rpf() called purify = TRUE, forest purified fit ensure components extracted extract_components() valid. extract_components() automatically purify forest is_purified() reports FALSE.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/purify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purify a Random Planted Forest — purify","text":"","code":"rpfit <- rpf(mpg ~., data = mtcars, max_interaction = 2, ntrees = 10) purify(rpfit) #> -- Regression Random Planted Forest -- #>  #> Formula: mpg ~ .  #> Fit using 10 predictors and 2-degree interactions. #> Forest is purified! #>  #> Called with parameters: #>  #>             loss: L2 #>           ntrees: 10 #>  max_interaction: 2 #>           splits: 30 #>        split_try: 10 #>            t_try: 0.4 #>            delta: 0 #>          epsilon: 0.1 #>    deterministic: FALSE #>         parallel: FALSE #>           purify: FALSE #>               cv: FALSE"},{"path":"http://plantedml.com/randomPlantedForest/reference/randomPlantedForest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","title":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","text":"implementation Random Planted Forest algorithm directly interpretable tree ensembles based functional ANOVA decomposition.","code":""},{"path":[]},{"path":"http://plantedml.com/randomPlantedForest/reference/randomPlantedForest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"randomPlantedForest: Random Planted Forest: A Directly Interpretable Tree Ensemble — randomPlantedForest-package","text":"Maintainer: Lukas Burk burk@leibniz-bips.de (ORCID) Authors: Joseph Theo Meyer Munir Hiabu Maike Spankus Marvin N. Wright cran@wrig.de","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Planted Forest — rpf","title":"Random Planted Forest — rpf","text":"Random Planted Forest","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Planted Forest — rpf","text":"","code":"rpf(x, ...)  # S3 method for data.frame rpf(   x,   y,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   parallel = FALSE,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for matrix rpf(   x,   y,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   parallel = FALSE,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for formula rpf(   formula,   data,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   parallel = FALSE,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )  # S3 method for recipe rpf(   x,   data,   max_interaction = 1,   ntrees = 50,   splits = 30,   split_try = 10,   t_try = 0.4,   deterministic = FALSE,   parallel = FALSE,   purify = FALSE,   cv = FALSE,   loss = \"L2\",   delta = 0,   epsilon = 0.1,   ... )"},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Planted Forest — rpf","text":"x, data Feature matrix, data.frame, recipe. ... (Unused). y Target vector use x. class y (either numeric factor) determines regression classification performed. max_interaction [1]: Maximum level interaction determining maximum number split dimensions tree. default 1 corresponds main effects . 0, number fo columns x used, .e. 10 predictors, equivalent setting max_interaction = 10. ntrees [50]: Number trees generated per family. splits [30]: Number splits performed tree family. split_try [10]: Number split points considered choosing split candidate. t_try [0.4]: value (0,1] specifying proportion viable split-candidates round. deterministic [FALSE]: Choose whether approach deterministic random. parallel [FALSE]: Perform algorithm parallel serialized. purify [FALSE]: Whether forest purified. Set TRUE enable components extract extract_components() valid. Can achieved fitting purify(). cv [FALSE]: Determines cross validation performed. loss [\"L2\"]: regression, \"L2\" supported. classification, \"L1\", \"logit\" \"exponential\" also available. \"exponential\" yield similar results \"logit\" significantly faster. delta [0]: used loss = \"logit\" \"exponential\". Proportion class membership truncated smaller 1-delta calculating loss determine optimal split. epsilon [0.1]: used loss = \"logit\" \"exponential\". Proportion class membership truncated smaller 1-epsilon calculating fit leaf. formula Formula specification, e.g. y ~ x1 + x2.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Planted Forest — rpf","text":"Object class \"rpf\" model object contained $fit.","code":""},{"path":"http://plantedml.com/randomPlantedForest/reference/rpf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Planted Forest — rpf","text":"","code":"# Regression with x and y rpfit <- rpf(x = mtcars[, c(\"cyl\", \"wt\")], y = mtcars$mpg)  # Regression with formula rpfit <- rpf(mpg ~ cyl + wt, data = mtcars)"}]
